{"version":3,"sources":["InfoBox.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","Map","center","zoom","TileLayer","url","attribution","App","useState","countries","setCountries","country","setCountry","countryInfo","setCountryInfo","lat","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","useEffect","fetch","then","response","json","data","a","map","name","value","iso2","getCountriesData","countryChange","event","countryCode","target","long","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","recovered","todayDeaths","deaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fcfd6560.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\"\r\n\r\nfunction InfoBox({ title, cases, total}) {\r\n  return (\r\n    <Card className=\"infoBox\">\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" color=\"primary\" >\r\n          {title}\r\n        </Typography>\r\n        <h3 className=\"infoBox__cases\" color=\"textSecondary\">\r\n          +{cases}\r\n        </h3>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;","import React from 'react'\r\nimport \"./Map.css\"\r\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\"\r\n\r\nfunction Map({center,zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","\n\nimport React , {useState,useEffect} from \"react\"\nimport {\n    MenuItem,\n    FormControl,\n    Select,\n    card,\n    CardContent,\n  } from \"@material-ui/core\";\n\nimport \"./App.css\"\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\"\n\nfunction App(){\n  const [countries, setCountries] = useState([])\n  const [country, setCountry]=useState(\"worldwide\")\n  const [countryInfo, setCountryInfo] = useState({});\n  const [mapCenter,setMapCenter]=useState({\n    lat:34.80746,lng:-40.4796})\n  const [mapZoom,setMapZoom]=useState(3)\n\n  useEffect(() =>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response) => response.json())\n        .then((data) =>{\n          setCountryInfo(data);\n        });\n  },[]);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const countryChange= async (event)=>{\n    const countryCode=event.target.value;\n\n\n    const url=\n      countryCode ===\"worldwide\"\n      ? \"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n      await fetch(url)\n        .then((response) => response.json())\n        .then((data) =>  {\n          setCountry(countryCode);\n          setCountryInfo(data);\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n        })\n  };\n\n    return(\n         <div className=\"app\">\n           <div className=\"app__left\">\n            <div className=\"app__header\">\n            <h1>COVID-19 Tracker</h1>\n            <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={countryChange}\n              value={country}>\n                <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n               { countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))}\n             \n            </Select>\n            </FormControl>\n          </div>\n          \n          <div className=\"app__info\">\n            <InfoBox title=\"Cases\" cases={countryInfo.todayCases} total={countryInfo.cases}/>\n            <InfoBox title=\"Recovered\" cases={countryInfo.todayRecovered} total={countryInfo.recovered}/>\n            <InfoBox title=\"Deaths\" cases={countryInfo.todayDeaths} total={countryInfo.deaths}/>\n          </div>\n\n          <Map\n          center={mapCenter}\n          zoom={mapZoom}\n          />\n          </div>\n          \n\n          {/* <div className=\"app__right\">\n            <card>\n              <CardContent>\n                table\n              </CardContent>\n            </card>\n          </div> */}\n        </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}